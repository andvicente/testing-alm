{"tagline":"","body":"# Introdução\r\nEste projeto foi criado para uma palestra no TDC 2012 em SP no dia 05/07/2012 na trilha de ALM com o título: Testes Funcionais em um ALM Open Source\r\n\r\nO intuito do exemplo e apresentação é mostrar que, dentro de um projeto, todos devem dar foco não somente aos testes unitários e integração de componentes, mas também aos testes funcionais.\r\nHoje muitos desenvolvedores usam, de forma correta, uma gama de ferramentas de teste e relacionadas para garantir a qualidade do código, mas isso não basta para entregar um produto de qualidade ao cliente.\r\n\r\n# Proposta\r\nApresentar a integração das ferramentas de Testes Funcionais e ferramentas relacionadas a etapa de teste.\r\nO projeto parte do principio que o time de teste utilize ferramentas para as seguintes frentes:\r\n* Gestão de Teste\r\n* Gestão de Defeitos\r\n* Automação Funcional / Aceitação\r\n\r\n# Funcionamento\r\nExistem quatro pacotes relacionados as ferramentas de teste:\r\n* bugzilla\r\n* mantis\r\n* testlink\r\n* redmine\r\n\r\nCada pacote contem duas classes onde <ferramenta> é o nome da ferramenta: \r\n* <Ferramenta>Instance: classe responsável pela comunicação inicial com a ferramenta (Singleton)\r\n* <Ferramenta>Utils: classe de reescrita dos métodos da API de cada ferramenta\r\n\r\nO pacote _selenium_ contém os testes criados com Selenium/Webdriver utilizando um design pattern chamado PageObjects\r\n\r\nO pacote _utils_ possui classes de apoio as ferramentas e a execução de teste\r\n\r\nO pacote _testes_ possui o teste que é apresentado como exemplo\r\n\r\n## Configuração inicial\r\nAntes de executar os testes deste projeto é necessário alterar o arquivi _config.properties_ com as URL's e acessos necessários para cada ferramenta.\r\n\r\nApós isso é necessário configurar o Testlink e alguma ferramenta de Gestão de Defeitos para executar um dos exemplos.\r\nAs configurações das ferramentas encontram-se no final desta página.\r\n\r\n# Configuração das Ferramentas\r\n\r\n### Testlink\r\nFoi utilizada a versão 1.9.3 para a integração do Testlink.\r\nUtilizei a API Java desenvolvida por [Bruno Kinoshita](http://www.kinoshita.eti.br/) achamada [testlink-java-api](http://testlinkjavaapi.sourceforge.net/)\r\n\r\nPara que seja possível executar o exemplo é necessário:\r\n* Efetuar login no Testlink\r\n* Ir ao menu _My Settings_ e clicar no botão _Generate API Access Key_. Guarde esta chave\r\n* Adicionar as seguintes linhas no arquivo _custom_config.php_\r\n** $tlCfg->api->enabled = TRUE;\r\n** $tlCfg->exec_cfg->enable_test_automation = ENABLED;\r\n* Alterar as seguintes propriedades o arquivo _config.properties_ da aplicação de exemplo\r\n** testlink.url: substitua _<your_testlink_url>_ pela URL do Testlink sem remover o restante do caminho\r\n** testlink.devkey: cole a key gerada ao item 2\r\n\r\n### Mantis\r\nFoi utilizado a versão 1.2.8 para a integração do Mantis.\r\nUtilizei a API Java chamada [MantisConnect](http://www.futureware.biz/mantisconnect/), mantida por um dos desenvolvedores do Mantis\r\n\r\nPara que seja possível executar o exemplo é necessário:\r\n* Alterar as seguintes propriedades no arquivo _config.properties_ da aplicação do exemplo\r\n** mantis.url: substitua _<your_mantis_url>_ pela URL do Mantis sem remover o restante do caminho\r\n** mantis.user: usuario registrado no Mantis\r\n** mantis.password: senha do usuário registrado no Mantis\r\n\r\n### Bugzilla\r\nFoi utilizada a versão 4.2.1 para a integração do Bugzilla\r\nNenhuma API especifica do Bugzilla foi usada. Utilizei diretamenta a classe _XmlRpcClient_ da Apache para submeter as informações ao Bugzilla.\r\n\r\nPara que seja possível executar o exemplo é necessário:\r\n* Alterar as seguintes propriedades no arquivo _config.properties_ da aplicação do exemplo\r\n** bugzilla.url: substitua _<your_bugzilla_url>_ pela URL do Bugzilla sem remover o restante do caminho\r\n** bugzilla.user: usuario registrado no Bugzilla\r\n** bugzilla.password: senha do usuário registrado no Bugzilla\r\n\r\n### Redmine\r\nFoi utilizada a versão 2.0.3 para a integração do Redmine\r\nUtilizei a API [redmine-java-api](https://github.com/taskadapter/redmine-java-api) mantida pelo grupo de desenvolvimento do Redmine para submeter as informações para o Redmine.\r\n\r\nComo o Redmine não é nem um ferramenta de gestão de teste e nem uma ferramenta de gestão de defeitos, aqui estamos utilizando o módulo de issues, que se assemelha mais ao modelo de bugs.\r\n\r\nPara que seja possível executar o exemplo é necessário\r\n* Efetuar login no Redmine\r\n* Clicar no link _My account_\r\n* Clicar no link _Show_ do item _API access key_\r\n* Alterar as seguintes propriedades no arquivo _config.properties_ da aplicação do exemplo\r\n** redmine.url: substitua _<your_redmine_url>_ pela URL do Redmine sem remover o restante do caminho\r\n** redmine.key: cole a chave do copiada do item _API access key_\r\n\r\n## Execução do Exemplo\r\nO exemplo está localizado no pacote _com.eliasnogueira.testing-alm.testes_ e a classe de testes que deve ser executada é _ExecutaTestesPorFerramenta_\r\n\r\nEsta classe utiliza o JUnit para o suporte a execução dos testes e tem três métodos de teste:\r\n* erroBugzilla: executa o teste e reporta um bug no Bugzilla\r\n* erroRedmine: executa o teste e reporta uma issue no Redmine\r\n* erroMantis: execute o teste e reporta um erro no Mantis\r\n\r\nTodos os métodos de teste também reportam resultado para o Testlink.\r\n\r\nO seguinte trecho em cada método irá gerar uma exception para simular um erro e chamar a integração de cada ferramenta:\r\n```java\r\nassertTrue(login.estaNaPaginaDeLogin(\"PROVOCA ERRO\"));\r\n```\r\nO resultado esperado para este assertion seria _ALM TDC_","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Testing ALM - Exemplos de Testes Funcionais com ferramentas Open Source"}